{
  "name": "ai-input-05",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { CornerRightUp } from \"lucide-react\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\n\nconst INITIAL_TEXT = \"What can i do for you?\";\nconst SPEED = 30;\n\nexport default function AIInput_05() {\n    const [inputValue, setInputValue] = useState(\"\");\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n        minHeight: 50,\n        maxHeight: 200,\n    });\n    const [displayText, setDisplayText] = useState(\"\");\n    const [isTyping, setIsTyping] = useState(true);\n\n    const handleSubmit = useCallback(() => {\n        setInputValue(\"\");\n        adjustHeight(true);\n    }, [adjustHeight]);\n\n    useEffect(() => {\n        let currentIndex = 0;\n\n        const typeText = () => {\n            if (currentIndex < INITIAL_TEXT.length) {\n                setDisplayText(INITIAL_TEXT.slice(0, currentIndex + 1));\n                currentIndex++;\n                setTimeout(typeText, SPEED);\n            } else {\n                setIsTyping(false);\n            }\n        };\n\n        typeText();\n    }, []);\n\n    return (\n        <div className=\"w-full py-4\">\n            <div className=\"text-2xl p-4 bg-background min-h-[100px] flex items-center justify-center\">\n                <p className=\"text-black dark:text-white font-semibold\">\n                    {displayText}\n                    {isTyping && <span className=\"animate-blink\">|</span>}\n                </p>\n            </div>\n\n            <div className=\"relative max-w-xl w-full mx-auto\">\n                <Textarea\n                    id=\"ai-input-05\"\n                    placeholder=\"Ask me anything!\"\n                    className=\"max-w-xl bg-black/5 dark:bg-white/5 w-full rounded-3xl pl-4 pr-12 placeholder:text-black/70 dark:placeholder:text-white/70 border-none text-black dark:text-white resize-none text-wrap min-h-[40px] py-4\"\n                    ref={textareaRef}\n                    value={inputValue}\n                    onKeyDown={(e) => {\n                        if (e.key === \"Enter\" && !e.shiftKey) {\n                            e.preventDefault();\n                            handleSubmit();\n                        }\n                    }}\n                    onChange={(e) => {\n                        setInputValue(e.target.value);\n                        adjustHeight();\n                    }}\n                />\n                <button\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 py-1 px-1\"\n                    type=\"button\"\n                    onClick={handleSubmit}\n                >\n                    <CornerRightUp\n                        className={cn(\n                            \"w-4 h-4 transition-opacity dark:text-white\",\n                            {\n                                \"opacity-100\": inputValue,\n                                \"opacity-30\": !inputValue,\n                            }\n                        )}\n                    />\n                </button>\n            </div>\n        </div>\n    );\n}\n",
      "path": "/components/wackyui/ai-input/ai-input-05.tsx",
      "target": "/components/wackyui/ai-input-05.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}